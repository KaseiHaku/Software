worker_processes 1;

events { 
    # use epoll;        # 可以不用配置 nginx 会自动根据平台的不同，选择不同的连接处理方式
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    
    server_names_hash_bucket_size  64;          # 当 server_name 比较多或比较长时，需要适当增加该值，否则报错
    server_names_hash_max_size 512;             # 当 server_name 比较多或比较长时，需要适当增加该值，否则报错
    
    # 一个 server 代表一个 Web 服务
    server {
        # IP 地址表示数据包来源地址为 192.168.1.1 时，由当前 server 处理请求
        # 表示当前服务监听的端口，注意是服务器本机端口，而上面 IP 是客户端 IP
        # ssl 表示是 https 服务，         
        # default_server 表示域名匹配不上其他 server_name 时，使用当前 server 提供服务 
        listen 192.168.1.1:8443 ssl default_server;      
        
        # 用于匹配 Host Request Header，
        # 匹配优先级为：精确域名 > * 开头的域名 > * 结尾的域名
        server_name     example.org             # 用于匹配域名，支持 通配符 和 正则
                        *.example.org  
                        .example.org            # *.example.org  和 example.org 
                        www.example.*
                        ""                      # 允许 http 请求，没有 Host Header
                        _                       # 表示捕获所有域名，不能使用 * 捕获所有域名
                        
                        192.168.1.1
                        ~^(?<user>.+)\.example\.net$;      
        
        root /srv/Web/haku.kasei;            # 默认映射路径，当 location 中没有配置 root 时生效
        
        
        # 使用默认路径映射，nginx 总是先匹配路径最长的 location
        location / {             
            index index.html    # 默认首页
        }
        
        # 静态资源服务配置
        # nginx 会优先选取 location 最长的做匹配
        location /static/ {                        # 此处的 / 对应 https://haku.kasei/static
            root /srv/Web/haku.kasei/static;      # 此处表示 https://haku.kasei/static 根路径对应的服务器文件系统路径 
        }
        
        # nginx 优先匹配 固定前缀的路径，然后再匹配正则表达式路径，以下 location 格式，优先级由高到低
        # =         精确匹配
        # ^~        带修饰符前缀位置匹配，如果该 前缀匹配 匹配上了，那么不继续进行后续的 正则匹配
        # empty     普通前缀匹配，如果该 前缀匹配 匹配上了，继续进行 正则匹配，如果正则匹配 匹配上了，则 return 正则结果，否则 return 当前结果        
        # ~         区分大小写的正则
        # ~*        不区分大小写的正则
        location ~ \.(gif|jpg|png)$ {             # 正则表达式匹配 URL，映射所有 .gif .jpg .png 结尾的路径到指定文件系统，
            root /srv/Web/haku.kasei/image;        
        }
        
        
        # proxy_pass 情况下的特殊处理,
        # 当 location 以 / 结尾时，且前端请求路径为 http://xxx.com/proxy (不带 / 结尾) 时，会响应 301，并重定向到 http://xxx.com/proxy/ (带 / 结尾) 
        location /proxy/ {
            proxy_pass http://proxy.com;
        }
        
        
        # 动态接口服务配置
        location /dynamic/ {
            proxy_pass http://localhost:8080;       # 表示把动态请求转发给本机 8080 端口，一般是 Tomcat 的端口
            
            # 请求头转发配置
            proxy_pass_request_headers on;          # 表示转发 原请求头
            
            
            # 添加额外的请求头
            proxy_set_header Host $proxy_host;
            proxy_set_header Connection close;      # 当请求结束时，自动关闭连接
            
            # nginx 默认剔除掉 response header 中 "Date", "Server", "X-Pad", and "X-Accel-..." 等信息，该配置用于 额外剔除指定的 header
            proxy_hide_header x-kasei; 
            proxy_pass_header Authorization;        # 允许转发 Authorization 响应头 到 client
            # nginx 默认会根据 response header 进行特殊处理，该配置用于 忽略对指定 header 的处理
            proxy_ignore_headers X-Accel-Redirect X-Accel-Expires X-Accel-Limit-Rate X-Accel-Buffering X-Accel-Charset Expires Cache-Control Set-Cookie Vary;
        }
        
        
        
        
        
    }
    
    server {
        listen          80;
        server_name     "";
        return          444;        # server_name 没有匹配的时候，阻止处理请求
    }
    
    
    # 负载均衡配置
    server {
        listen 80;
        location / {
            proxy_pass http://myapp1;
        }
    }
    upstream myapp1 {
        least_conn;     # 负载均衡算法 [least_conn, ip_hash] 还有权重，配置在下面
        server srv1.example.com weight=3;   # 权重，越高负载越多，默认权重 1
        server srv2.example.com;
        server srv3.example.com;
    }

    
    
    # Websocket Proxy 配置：当客户端请求包含 Upgrade 头 或者 服务器返回 101 状态值时，表示要将当前连接，升级为 websocket，需要特殊处理这些头
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    server {
        location /chat/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

    
}
