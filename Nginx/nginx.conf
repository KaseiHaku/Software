# @doc https://nginx.org/en/docs/
# Concept:
#   directive(指令) 格式:
#       simple_directive   param1  param2 ... ;
#       block_directive   param1  param2 {}
# 
#   context: 每个 block_directive 就是一个 context，最外层的叫做 main context
#
#   measurement unit(度量单位):
#       字节: k/K, m/M, g/G 
#           "1024", "1024k", "1024m", "1024g"
#       interval: ms, s, m, h, d, w, M, y
#           "4ms", "1h 30m" = "90m"


# main context 相关 directive: https://nginx.org/en/docs/ngx_core_module.html

# debug 日志配置:
#   shell> nginx -V | grep -i '--with-debug'        # 检查编译时是否配置 debug 
# @doc https://nginx.org/en/docs/ngx_core_module.html#error_log
error_log /path/to/log debug;

# @doc https://nginx.org/en/docs/http/ngx_http_core_module.html#var_http_ 请求头打印文档
log_format  main  '$time_iso8601 '          # 时间
                  '$remote_addr '           # client 信息
                  '$server_protocol $request_method $scheme://$host$request_uri '  # request: URL
                  '$request_length [$http_host, $http_location, $http_referer, $http_x_forwarded_for] ' # request headers
                  '$server_name:$server_port '      # 接收请求的是哪个 server
                  '$upstream_addr '
                  'Resp: $status '
                  '$body_bytes_sent [$sent_http_location, $sent_http_content_type] ' # response headers
                  ;


worker_processes 8;     # CPU 有几核就配几
worker_rlimit_nofile 65535;     # nginx 最多打开的文件描述符数量，等于 shell> ulimit -n
worker_connections 65535;       # 每个 process 最大连接数
keepalive_timeout 60;           # keepalive 检测间隔时间
client_header_buffer_size 4k    # 必须是 shell> getconf PAGESIZE 的倍数


# 使用 压缩 来减少数据传输量
gzip on;       #表示开启压缩功能
gzip_min_length  1k; #表示允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩，建议设置成大于1K。如果小于1K可能会越压越大
gzip_buffers     4 32k; #压缩缓存区大小
gzip_http_version 1.1; #压缩版本
gzip_comp_level 6; #压缩比率， 一般选择4-6，为了性能
gzip_types text/css text/xml application/javascript;


events { 
    # use epoll;        # 可以不用配置 nginx 会自动根据平台的不同，选择不同的连接处理方式
}

# http ccontext 相关 directive: https://nginx.org/en/docs/http/ngx_http_core_module.html
http {
    
    sendfile on;    # 开启高效文件传输模式, 如果图片显示不正常把这个改成off
    open_file_cache max=102400 inactive=20s ; # 这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存
    open_file_cache_valid 30s; #这个是指多长时间检查一次缓存的有效信息。
    open_file_cache_min_uses 1; # 缓存最小使用次数，过小删除缓存
    reset_timedout_connection on; #  关闭不响应的客户端连接
    client_max_body_size 10m; #上传文件大小限制；
    
    client_header_timeout 15; 
    client_body_timeout 15;  # 超过指定时间没有接收到数据，直接断开连接
    
    include                         mime.types;
    default_type                    application/octet-stream;         # 定义默认的 resp MIME_TYPE
    
    server_names_hash_bucket_size   64;             # 当 server_name 比较多或比较长时，需要适当增加该值，否则报错
    server_names_hash_max_size      512;            # 当 server_name 比较多或比较长时，需要适当增加该值，否则报错
    
    # 一个 server 代表一个 Web 服务
    server {
        # IP 地址表示数据包来源地址为 192.168.1.1 时，由当前 server 处理请求
        # 表示当前服务监听的端口，注意是服务器本机端口，而上面 IP 是客户端 IP
        # ssl 表示是 https 服务，         
        # default_server 表示域名匹配不上其他 server_name 时，使用当前 server 提供服务 
        listen 192.168.1.1:8443 ssl default_server;      

        # server_name 匹配逻辑:
        #   function matchLogic(httpRequest) {
        #       if( "Host" Request Header 存在 ){
        #           使用 Host 的值进行匹配;
        #           if(匹配成功){
        #               return 匹配到的 server{}
        #           }
        #       }
        #       if(default_server 存在){
        #           return 包含 default_server 的 server{};
        #       }
        #       return nginx.conf 中第一个 server{};
        #   }
        #   @doc https://nginx.org/en/docs/http/request_processing.html
        # 匹配优先级为：精确域名 > * 开头的最长域名 > * 结尾的最长域名 > 第一个匹配的正则表达式(根据在配置文件中的出现顺序)
        server_name     example.org             # 用于匹配域名，支持 通配符 和 正则
                        *.example.org  
                        .example.org            # *.example.org  和 example.org 
                        www.example.*
                        ""                      # 允许 http 请求，没有 Host Header
                        _                       # 表示捕获所有域名，不能使用 * 捕获所有域名
                        
                        192.168.1.1
                        ~^(?<user>.+)\.example\.net$;      
        
        root /srv/Web/haku.kasei;            # 默认映射路径，当 location 中没有配置 root 时生效
        
        
        # 使用默认路径映射，nginx 总是先匹配路径最长的 location
        location / {             
            index index.html    # 默认首页
        }
        
        # 静态资源服务配置
        # nginx 会优先选取 location 最长的做匹配
        location /static/ {                        # 此处的 / 对应 https://haku.kasei/static
            root /srv/Web/haku.kasei/static;      # 此处表示 https://haku.kasei/static 根路径对应的服务器文件系统路径 
        }
        
        # nginx 优先匹配 固定前缀的路径，然后再匹配正则表达式路径，以下 location 格式，优先级由高到低
        # =         精确匹配
        # ^~        带修饰符前缀位置匹配，如果该 前缀匹配 匹配上了，那么不继续进行后续的 正则匹配
        # empty     普通前缀匹配，如果该 前缀匹配 匹配上了，继续进行 正则匹配，如果正则匹配 匹配上了，则 return 正则结果，否则 return 当前结果        
        # ~         区分大小写的正则
        # ~*        不区分大小写的正则
        location ~ \.(gif|jpg|png)$ {             # 正则表达式匹配 URL，映射所有 .gif .jpg .png 结尾的路径到指定文件系统，
            root /srv/Web/haku.kasei/image;        
        }
        
        
        # 如果使用 proxy_pass 处理, 那么 location 中的 "普通前缀匹配" 必须以 / 结尾
        # 当 location 以 / 结尾时，且前端请求路径为 http://xxx.com/foo (不带 / 结尾) 时，会响应 301，并重定向到 http://xxx.com/foo/ (带 / 结尾) 
        # location 以不以 / 结尾的区别?
        #     - location 中的字符有没有 / 都没有影响。也就是说 /foo/ 和 /foo 是一样的。
        #     - 如果浏览器输入 https://domain.com，尾部有没有 / 都不会造成重定向，因为浏览器在发起请求的时候，默认加上了 /，变成 https://domain.com/
        #     - 因为根据约定，URL 尾部的 / 表示目录，没有 / 表示文件
        #       如果浏览器输入 https://domain.com/foo/ 时，服务器会自动去该目录下找对应的默认文件。
        #       如果浏览器输入 https://domain.com/foo 的话，服务器会先去找 foo 文件，找不到的话会将 foo 当成目录，重定向到 /foo/，再去该目录下找默认文件
        location /foo/ {

            # 如果 proxy_pass 带 path(即: /bar)，那么 http://xxx.com/foo/test => http://proxy.com/bar/test
            # @trap http://proxy.com/ 是带 path 的，path = /
            proxy_pass http://proxy.com/bar/;
            
            # 如果 proxy_pass 不带 path，那么 http://xxx.com/foo/test => http://proxy.com/foo/test
            rewrite    /foo/([^/]+) /users?name=$1 break;        # 改写原始 URL 后，在发送给 http://proxy.com
            proxy_pass http://proxy.com;
        }
        
        
        # 动态接口服务配置
        location /dynamic/ {
            proxy_pass http://localhost:8080;       # 表示把动态请求转发给本机 8080 端口，一般是 Tomcat 的端口
            
            # 请求头转发配置
            proxy_pass_request_headers on;          # 表示转发 原请求头
            
            
            # 添加额外的请求头
            proxy_set_header Host $proxy_host;
            proxy_set_header Connection close;      # 当请求结束时，自动关闭连接
            
            # nginx 默认剔除掉 response header 中 "Date", "Server", "X-Pad", and "X-Accel-..." 等信息，该配置用于 额外剔除指定的 header
            proxy_hide_header x-kasei; 
            proxy_pass_header Authorization;        # 允许转发 Authorization 响应头 到 client
            # nginx 默认会根据 response header 进行特殊处理，该配置用于 忽略对指定 header 的处理
            proxy_ignore_headers X-Accel-Redirect X-Accel-Expires X-Accel-Limit-Rate X-Accel-Buffering X-Accel-Charset Expires Cache-Control Set-Cookie Vary;
        }
        
        # 使用 客户端缓存
        location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ {
            expires 1d;   # 1天，从太长不好
            #log_not_found off;
            access_log off;
        }
        
        # 防止当前网站被 爬取数据
        location ~*^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ {
            valid_referers noneblocked www.benet.com benet.com;
            if($invalid_referer) {
              #return 302 https://cache.yisu.com/upload/information/20200218/28/1413.jpg;
              return 404;
              break;
            }
            access_log off;
        }
        
        
        
    }
    
    server {
        listen          80;
        server_name     "";
        return          444;        # server_name 没有匹配的时候，阻止处理请求
    }
    
    
    # 负载均衡配置
    server {
        listen 80;
        location / {
            proxy_pass http://myapp1;
        }
    }
    upstream myapp1 {
        least_conn;     # 负载均衡算法 [least_conn, ip_hash] 还有权重，配置在下面
        server srv1.example.com weight=3;   # 权重，越高负载越多，默认权重 1
        server srv2.example.com;
        server srv3.example.com;
    }

    
    
    # Websocket Proxy 配置：当客户端请求包含 Upgrade 头 或者 服务器返回 101 状态值时，表示要将当前连接，升级为 websocket，需要特殊处理这些头
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    server {
        location /chat/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
    
    
    
    # 文件服务器 反向代理
    # 展示 Nginx 作为 文件上传 反向代理时的 特殊配置
    server {
        chunked_transfer_encoding       on;             # HTTP/1.1 中 chunked 的支持

        client_body_buffer_size         4m;             # 前端请求 缓冲区 大小，超过该大小会写入到 临时文件，@trap 一定要对 临时文件 有操作权限
        client_body_in_file_only        off;            # 是否保存完整的 req body 到文件中；[on=保留临时文件, clean=删除临时文件, off=不保存]
        client_body_in_single_buffer    off;            # 是否将完整 req body 保存到单个 buffer 中; [on, off]
        client_body_temp_path           /xxx/client_temp;   # req body 临时文件保存路径
        client_body_timeout             60s;            # req body 读取的超时时间
        client_header_buffer_size       1k;             # req header 的 缓冲区大小
        client_header_timeout           60s;            # req header 读取的超时时间
        client_max_body_size            64m;            # 配置 request 最大字节数限制，超过此配置，返回 413 
            
        default_type                    application/octet-stream;         # 定义默认的 resp MIME_TYPE
    
        
        location / {
            proxy_http_version          1.0;            # 被代理服务器支持的 HTTP 协议的版本。默认 1.0，建议 1.1，目前 1.1 已经广泛支持了
            
            proxy_request_buffering     on;             # on=先从 client 读取完整请求到 缓冲区，再发送到 proxied server
                                                        # off=直接将 client req 发送到 proxied server，
                                                        #     如果 client 使用 HTTP/1.1 chuned 模式发送，那么即使配置为 off 也会先读取到 缓冲区
                                                        #     除非跟 被代理服务器 使用 HTTP/1.1 协议交互，即: proxy_http_version 1.1;
            
            
            proxy_buffering             on;             # 是否为 被代理服务器的 resp 配置 缓冲区；[on=配置, off=不配置]
            proxy_buffer_size           8k;             # 读取被代理服务器 resp 的第一个 part 的缓冲区的大小
            proxy_buffers               8 8k;           # 为读取 被代理服务器 单个连接 的 resp 配置 8 个 8k 的缓冲区
            proxy_busy_buffers_size     32k;            # 当 被代理服务器 resp 没有读取完毕时，限制 用于发送 resp 内容给 client 的 buffer 的大小，
                                                        # 同时，剩下的 buffer 可以继续从 被代理服务器 读取 resp，建议配置成 proxy_buffers 的一半
                                                        # 如有必要，将 被代理服务器 的 resp 缓冲到 临时文件
            proxy_max_temp_file_size    1024m;          # 存储 被代理服务器 resp 的 临时文件的最大值
                
            proxy_connect_timeout       60s;            # 和 被代理服务器 建立连接的超时时间
            proxy_read_timeout          60s;            # 被代理服务器 resp 的读取超时时间
            proxy_send_timeout          60s;            # 向 被代理服务器 发送 req 的超时时间
            
            
        }
        
        
        
    }
    
    
    

    
}









