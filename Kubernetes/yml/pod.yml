# @trap Pod 是必须手工 scheduling(调度) 的，而 Deployment 才是自动 scheduling(调度) 的，所有 Pod 必须配置好在哪个 Node 上运行

apiVersion: v1
kind: Pod
metadata:
  name: dnsutils
  namespace: default
spec:

  # Containers 相关的
  containers:
    - name: dnsutils
      
      # Image
      image: k8s.gcr.io/e2e-test-images/jessie-dnsutils:1.3
      imagePullPolicy: IfNotPresent
      
      # Entrypoint
      command: [sleep, 3600 ] # entrypoint, 相当于 docker-compose 中的 entrypoint
      args: []      # entrypoint 的参数，相当于 docker-compose 中的 command
      workingDir: ''    # 指定工作目录
      
      # Ports
      ports:
        - containerPort: 1234     # 在 Pod IP 上的暴露端口
          name: xxx               # 命名端口，有多个端口时使用
          hostIP: 0.0.0.0         # 外部端口 绑定到 host 的哪个网卡(IP)上
          # 在 host 上暴露的端口，类似 docker-compose 中 4567:1234 , 这样可以使用当前 pod 所在 node 的 ip:hostPort 直接访问该容器
          # 和 ${.spec.hostNetwork} == true 的区别是，hostPort 只是端口映射，网络命名空间还是独立的，而 ${.spec.hostNetwork} == true 则是使用 node 的 网络命名空间
          # 如果 ${.spec.hostNetwork} == true, 那么该端口必须和 containerPort 端口一样
          hostPort: 4567          
          protocol: TCP           # [UDP, TCP, SCTP]
      
      # Volumes
      volumeMounts: 
        - name: xxx     # 和 pod 中 volumes 中的 name 一致
          mountPath: /xxx/yyy/zzz   # 挂载目录
          # 表示将 pod volumes 中名为 config 的 volume 的子路径 filebeat.yml, 挂载到当前 container 指定的路径上
          subPath: xxx    
          subPathExpr: $(POD_NAME)    # 和 subPath 互斥，但是可以引用 环境变量，主要用于动态挂载
          
      
      # SercurityContext
      securityContext:   # 同 pod 的 securityContext
      
  # 初始化容器：按顺序执行
  initContainers: []
  # 私有镜像仓库密码
  imagePullSecrets: 
    - name: myregistrykey   # 配置了 私有镜像库的 Secret 对象
  enableServiceLinks: true  # 将 service 信息通过 env variables 注入到 pod 中
  os:
    # pod container 的 操作系统 名称
    # 可用值：[linux, windows]
    name: linux

  # Volume 相关的
  # 当前 pod 容器中使用到的 卷
  volumes: []

  # Scheduling
  # 节点 label 选择器
  nodeSelector:
    app: aaa
  # 节点名称 选择器
  nodeName: xxx       # node name

  # 亲和性 描述
  affinity:
    nodeAffinity:       # 描述 pod 的在 scheduling 时，对 node 的亲和性
    podAffinity:      # 描述当前 pod 跟其他 pod 的亲和性，即：尽量将当前 pod 和 这些 pod 部署在一个 node, zone 中
    podAntiAffinity:    # 描述当前 pod 跟其他 pod 的反亲和性，即：避免将当前 pod 和 这些 pod 部署在一个 node, zone 中

  # 允许（但并不要求）Pod 调度到带有与之匹配的污点的 node 上
  # @doc https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations:
    - key: taintKey
      operator: Equal     # operator: Equal=全匹配，Exists=通配符匹配
      value: taintVal
      # 有效值：
      #   NoExecute: evict(驱逐) 任何不能 tolerate(容忍) 该 taint(污点) 的 pod
      #   NoSchedule: 禁止调度新的 不能 tolerate 当前 taint 的 pod 到当前 node 运行
      #   PreferNoSchedule: 尽量不调度新的 ...
      effect: NoExecute
      tolerationSeconds: 8    # effect=NoExecute 时有效，0=立即驱逐，不配置=永远不驱逐
    - {key: taintKey, operator: Exists, value:, effect: }

  schedulerName:   # 调度器名称，不配置则使用默认的

  runtimeClassName:
  priorityClassName:
  priority:
  # 拓扑传播约束
  topologySpreadConstraints:
    maxSkew:
    topologyKey:
    whenUnsatisfiable:
    labelSelector:

  # Lifecycle
  # 有效值：[Always, Never, OnFailure]
  restartPolicy: Always
  # pod 优雅结束的时间限制
  terminationGracePeriodSeconds:
  activeDeadlineSeconds:
  # 准备就绪 特性门
  readinessGates:
    conditionType:    # [ContainersReady, Initialized, PodScheduled, Ready]

  # Hostname and Name resolution
  # 指定 pod 的 hostname，默认=系统默认值
  hostname:
  setHostnameAsFQDN:
  subdomain:
  hostAliases:
    - {hostnames: [], ip:}
  dnsConfig:
    nameservers: []
    options:
      - {name:, value: }
    searches:
  dnsPolicy:   # [ClusterFirst, ClusterFirstWithHostNet, Default, None]


  # Hosts namespaces
  hostNetwork:
  hostPID:
  hostIPC:
  shareProcessNamespace:

  # 当前 pod 使用哪个 ServiceAccount 来运行
  serviceAccountName:
  automountServiceAccountToken: true      # 自动挂载 ServiceAccount 中的 token

  # 安全上下文
  securityContext:
    runAsUser: 1000   # 运行 docker image entrypoint 的 UID
    runAsNonRoot: false   # 确保容器不是以 root 用户运行的
    runAsGroup: 1000    # 运行 container 的 GID
    supplementalGroups: [ 1001 ]    # container 第一个进程运行的 附加 GID 

  # Beta level
  ephemeralContainers: []
  preemptionPolicy: []
  overhead:
    str: {}




