# in linux
    
    # 官网下载安装包：注意下载 LTS(long time supprot) 版本
    https://www.oracle.com/technetwork/java/javase/downloads/index.html
    jdk-11.0.3_linux-x64_bin.tar.gz
    
    # 拆包、解压
    shell> mkdir /usr/java              # 创建安装目录
    shell> mv ~/Downloads/jdk-11.0.3_linux-x64_bin.tar.gz /usr/java   # 移动压缩包到安装目录
    shell> cd /usr/java
    shell> tar -zxvf jdk-11.0.3_linux-x64_bin.tar.gz
    
    # yum 安装
    shell> yum install java-1.8.0-openjdk-devel.x86_64      # 注意安装 devel 版本的 openjdk
    
    # 配置环境变量
    shell> vim /etc/profile
    添加以下行：
    export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64  # CentOS 自带的 jdk 路径
    export CLASSPATH=.:${JAVA_HOME}/lib:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/jre/lib/rt.jar   # jdk1.5 之后就不用配置了
    export PATH=${JAVA_HOME}/bin:$PATH      # $PATH 放最后
    保存
    

    # 使环境变量生效
    shell> source /etc/profile

    # 测试是否安装成功
    shell> java -version

# in windows




1.Java 官网下载 jdk-8u144-windows-x64_8.0.1440.1.exe 并安装{
	JDK 安装过程中jdk 和 jre 不要在同一文件夹下，即如下安装
	jdk D:Java\jdk1.8.0_144
	jre D:Java\jre1.8.0_144
}

2.环境变量配置（注意：环境变量不分大小写）{
	JAVA_HOME = D:\Java\jdk1.8.0_144;
	PATH = %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;
	CLASSPATH = .;%JAVA_HOME%\lib;	rem 指明 java 虚拟机启动时要装载的类的路径，jdk1.5 之后就不用配置了
	JAVA_TOOL_OPTIONS = -Dfile.encoding=UTF-8 	rem 配置 jdk 默认编码格式为 UTF-8; jdk 默认编码根据操作系统决定; java 默认的编码方式为 Unicode 注意这三个的区分
}

3.测试是否安装成功{
	运行 - cmd - 输入命令：java -version - 回车 - 如果出现java版本则安装成功
}

4 java 程序的编译运行{

	4.1 文本编辑器编写好 Hello.java 文件
	4.2 编译： cmd - cd 到 Hello.java 文件存放的目录中 - 运行命令：javac Hello.java - 会在当前目录生成 Hello.class 文件
	4.3 运行：{
		4.3.1 源代码中没有 package 的情况：cmd - cd 到 Hello.class 文件的目录中 - 运行命令：java Hello 即可
		4.3.2 源代码中有 package：cmd - cd 到 package 的标识的目录下 - 运行命令：java Hello 即可
	}
	4.4 打包：{
		cmd - cd 到要打包的目录下 - 运行命令：jar -cvf test.jar *.* - 该命令表示打包当前文件夹下所有文件生成一个 test.jar 文件
		修改jar文件中的META-INF/MANIFEST.MF文件 - 在最后加一行 Main-Class: 包名.GetGreeting（带 main 方法的类） - 回车（不回车会报错）
	}
	4.5 命令行执行 .jar 程序：java -jar c:/temp/bin/test.jar
	
	4.6 命令行传参数到 java 程序：java packagename.classname parameter1 parameter2
}



5. JDK keytool 命令 {
    keytool 
    -genkey                             rem 表示生成一个证书
    -alias kasei                        rem 指定别名      
    -keyalg RSA                         rem 指定密钥使用加密算法
    -keystore e:/kasei.keystore         rem 指定保存密钥的文件
    -keysize                            rem 指定密钥的长度    
    -validity 128                       rem 指定证书的有效期为 128 天   
    -storepass                          rem 指定密钥库的密码(获取keystore信息所需的密码)
    -keypass                            rem 指定别名条目的密码(私钥的密码)
    -dname                              rem 指定证书拥有者信息 例如：  "CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码"
    -list                               rem 显示密钥库中的证书信息      keytool -list -v -keystore 指定keystore -storepass 密码
    -v                                  rem 显示密钥库中的证书详细信息
    -export                             rem 将别名指定的证书导出到文件  keytool -export -alias 需要导出的别名 -keystore 指定keystore -file 指定导出的证书位置及证书名称 -storepass 密码
    -file                               rem 参数指定导出到文件的文件名
    -delete                             rem 删除密钥库中某条目          keytool -delete -alias 指定需删除的别  -keystore 指定keystore  -storepass 密码
    -printcert                          rem 查看导出的证书信息          keytool -printcert -file yushan.crt
    -keypasswd                          rem 修改密钥库中指定条目口令    keytool -keypasswd -alias 需修改的别名 -keypass 旧密码 -new  新密码  -storepass keystore密码  -keystore sage
    -storepasswd                        rem 修改keystore口令      keytool -storepasswd -keystore e:/yushan.keystore(需修改口令的keystore) -storepass 123456(原始密码) -new yushan(新密码)
    -import                             rem 将已签名数字证书导入密钥库  keytool -import -alias 指定导入条目的别名 -keystore 指定keystore -file 需导入的证书
}







