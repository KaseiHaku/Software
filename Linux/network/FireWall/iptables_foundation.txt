Concept:
    iptables: 不是真正的防火墙，只是一个操作防火墙的工具，位于用户空间，计划要被 nftables 替代
    netfilter: linux 中真正的防火墙，位于内核空间
    
    Table 表： 相似功能规则的集和
        有以下几种类型的表： 优先顺序从高到底
            raw 表： 关闭 nat 表中启用的连接追踪机制
            mangle 表： 拆解报文，执行修改，重新封装的功能
            nat 表： 网络地址转换功能，
            filter 表： 负责包过滤功能，
    Chain 链： 由一连串过滤规则组成的串
        有以下几种类型的链：
            prerouting      链的规则可以存在于 raw -> mangle -> nat          (箭头表示规则优先顺序)
            input           链的规则可以存在于 mangle -> nat -> filter 
            forward         链的规则可以存在于 mangle -> filter 
            output          链的规则可以存在于 raw -> mangle -> nat -> filter
            postrouting     链的规则可以存在于 mangle -> nat 
    Rule 规则：
        用与匹配数据包的条件
        
    Target 处理动作：
        accept: 允许数据包通过
        drop: 直接丢弃数据包，不会返回任何信息
        reject： 拒绝数据包通过，会返回一个响应信息
        snat： 源地址转换，解决内网用户用同一个公网地址上网问题
        masquerade: 是 snat 的一种特殊形式，适用于动态的，临时会变的 ip 上
        dnat: 目标地址转换
        redirect: 重定向到本机端口
        log: 在 /var/log/messages 文件中生成一条日志信息，其他不做任何操作，数据包继续匹配下一个规则
        
    各个概念梳理：
        Tabel 中有内建的 Chain，不同的 Table 中拥有不同类型的 Chain，
        不同类型的 Chain 处在数据流向过程中的不同位置，
        Chain 包含 Rule，不同类型 Chain 里面的规则，只在 Chain 所在数据流向指定位置起作用
        
        所以添加一条 Rule 需要明确以下几点：
            1. 该 Rule 在数据流向的哪个位置起作用，那么就配置成对应类型的 Chain
            2. 该 Rule 的功能是什么，如果是 过滤，那么应该把该 Rule 放到 filter 表中
        
 
Netfilter Packet Flow：
    /** todo 数据流入 过程介绍
     * @param dataPacket: Network 上接收到的数据包
     * */
    function packetTrendIngress(dataPacket){
        dataPacket 匹配 raw 表中 PREROUTING 链中的规则;
        dataPacket 匹配 mangle 表中 PREROUTING 链中的规则;
        dataPacket 匹配 nat 表中 PREROUTING 链中的规则;
        if(dataPacket 的目的地是 firewall 本身){        
            dataPacket 匹配 mangle 表中 INPUT 链中的规则;
            dataPacket 匹配 nat 表中 INPUT 链中的规则;
            dataPacket 匹配 filter 表中 INPUT 链中的规则;

            dataPacket 被送往 上层协议栈 到达应用程序;
        } else {
            dataPacket 匹配 mangle 表中 FORWARD 链中的规则;
            dataPacket 匹配 filter 表中 FORWARD 链中的规则;

            dataPacket 匹配 mangle 表中 POSTROUTING 链中的规则;
            dataPacket 匹配 nat 表中 POSTROUTING 链中的规则;

            dataPacket 被送往网卡，通过网线发送出去;
        }
    }

    /** todo 数据流出 过程介绍
     * @param dataPacket: Application 中发送的数据包
     * */
    function packetTrendEgress(dataPacket){        
        dataPacket 匹配 raw 表中 OUTPUT 链中的规则;
        dataPacket 匹配 mangle 表中 OUTPUT 链中的规则;
        dataPacket 匹配 nat 表中 OUTPUT 链中的规则;
        if(dataPacket 被上面 mangle 或 nat 表中的规则修改过){
            packetTrendIngress(dataPacket);
        } else {
            dataPacket 匹配 filter 表中 OUTPUT 链中的规则;

            dataPacket 匹配 mangle 表中 POSTROUTING 链中的规则;
            dataPacket 匹配 nat 表中 POSTROUTING 链中的规则;

            dataPacket 被送往网卡，通过网线发送出去;
        }
    }
    
Netfilter Pit:
    1. UDP 只能使用 tproxy 做转发
    2. tproxy 不能用于 OUTPUT 链
    3. 由于 Netfilter 的特性，在 OUTPUT 链打标记会使相应的包重路由到 PREROUTING 链上，
       在已经配置好了 PREROUTING 相关的透明代理的情况下，OUTPUT 链也可以透明代理了，也就是网关对自身的 UDP 流量透明代理自身


