# Concept 
# 记住本地也保存了一份远程库的所有数据，但不一定跟远程库完全同步


######## 操作 LocalRemoteRepo 本地远程库
本地远程库 本身的 CURD {
    shell> git remote -v                            # 查看所有 本地远程库 的信息
    shell> git remote add origin url                # 添加一个名为 origin 的 LocalRemoteRepo
    shell> git remote remove origin                 # 删除一个名为 origin 的本地远程库
    shell> git remote rename origin origin2         # 修改 本地远程库 名称
}

# 本地远程库 分支的 CURD
Query {
    shell> git branch -r -vv            # 查看 LocalRemoteRepo 中所有远程分支
    shell> git branch --remotes --list --verbose      # 查看本地的远程库的所有分支
}

Create {
    shell> git clone url                                            # clone 会自动创建一个名为 origin 的 LocalRemoteRepo
    shell> git clone --single-branch -b branchName -- url           # clone 指定的远程分支到名为 origin 的 LocalRemoteRepo 中
    
    shell> git fetch origin                     # 从名为 origin 的 本地远程库 关联的 RemoteRepo 中拉取所有分支到 LocalRemoteRepo 中
    shell> git fetch origin master              # 从名为 origin 的 LocalRemoteRepo 关联的 RemoteRepo 中拉取 master 分支到 LocalRemoteRepo 中的 master 分支
    shell> git fetch origin master:main         # 从名为 origin 的 LocalRemoteRepo 关联的 RemoteRepo 中拉取 master 分支到 LocalRemoteRepo 中的 main 分支
    shell> git fetch --dry-run --prune origin   # 从名为 origin 的 LocalRemoteRepo 关联的 RemoteRepo 中拉取所有分支到 LocalRemoteRepo 中，
                                                # 并删除 LocalRemoteRepo 中不存在于 RemoteRepo 的分支
                                                
    shell> git pull origin master               # 从名为 origin 的 LocalRemoteRepo 关联的 RemoteRepo 中拉取 master 分支到 LocalRemoteRepo 中的 master 分支
                                                # 并将 LocalRemoteRepo 中的 master 分支 merge 到 currentBranch
                                                # 相当于  git fetch origin master && git merge origin/master
}

Delete {
    shell> git branch -r -d origin/debug                # 删除 本地远程库中的分支 
    shell> git remote prune -n origin           # 删除本地远程库中，在实际远程库中不存在的分支, -n = dry-run
    shell> git pull -p                          # 删除本地远程库中，在实际远程库中不存在的分支
    
}

Update {
    # 无单独更新操作，所有更新操作跟下面 RemoteRepo 更新操作一样，更新 RemoteRepo 时，会同步更新 LocalRemoteRepo 中的数据
}



######## 操作 RemoteRepo 远程库
Query {
    shell> git fetch --all && git branch -r -vv             # 查看 RemoteRepo 中所有远程分支
}

Create {
    shell> git push origin localBranch:remoteBranch         # 将本地库的 localBranch 分支推送到 origin 远程库的 remoteBranch 分支上，若远程分支没有，则创建远程分支
    shell> git push origin --tags                           # 将本地库 tag 推到远程库

}

Delete {
    shell> git push origin :debug                   # 删除 origin 远程库中的 debug 分支
    shell> git push --delete origin dev             # 同上，删除 origin 远程库 中 dev 分支
    shell> git push --prune origin                  # 删除 origin 远程库中 在本地库 中没有的分支 
}

Update {
    shell> git push origin localBranch:remoteBranch             # 将本地库中的 localBranch 推送到 origin 远程库中，localBranch 配置了 上游 分支后 remoteBranch 可以省略
    shell> git push --force origin localBranch:remoteBranch     # 强制覆盖远程库分支内容 
    shell> git push origin --all                            # 推送 本地库所有分支 到 远程库 （前提是本地分支已经绑定了远程分支）
}














