# .gitignore 文件中，每一行的忽略规则的匹配语法如下：
#   转义字符为 \, 当以 \ 结尾时，表示 续行
#   以 '＃' 开头的行都会被 Git 忽略。即 # 开头的文件标识注释，可以使用 \ 进行转义。
#   空格不匹配任意文件，可作为分隔符，可用反斜杠转义
#   /abc, ab/c    当 / 存在于 pattern 的 开头 或 中间 时，pattern 是相对于 .gitignore 文件所在的目录的
#   abc           当 pattern 中不存在 / 时，匹配 .gitignore 所在目录及其子目录下的所有文件
#   abc/          如果 pattern 以 / 结尾，那么 pattern 仅仅匹配目录，否则会同时匹配目录和文件
#   asterisk(*) 匹配除了 / 以外的所有字符串
#   ? 匹配除了 / 以外的所有单字符
#   [abc] = a | b | c; [a-zA-Z]: 匹配 a 到 z 或 A 到 Z 
#   **/foo    匹配 .gitignore 所在目录及其子目录中，所有的 foo 文件或目录
#   abc/**    匹配 abc 目录下的所有内容，不包括 abc 本身
#   a/**/z    可以匹配 a/z, a/b/z 或 a/b/c/z等
#   以叹号"!"表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
#     需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用"!"规则是不起作用的。
#     也就是说"!"开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用"!"也不会再次被包含。可以使用反斜杠进行转义。


# 如果在使用过程中 .gitignore 文件出现修改，需要执行以下命令，才能使更新后的 .gitignore 文件生效
#   shell> git rm -r --cached .                     # 从 工作区 或 缓存区 删除文件，--cached: 只删除缓存区
#   shell> git add .                                # 将文件添加到 缓存区
#   shell> git commit -m "update .gitignore"        # 提交和注释
#   shell> git push origin master                   # 可选，如果需要同步到 remote 上的话


# 检查一个 path 是否被 .gitignore 忽略，
# @trap .gitignore 只针对 untracked 的文件，对已经 tracked 的文件不生效
#   shell> git check-ignore -v ./path
#   shell> git status --ignored     

# ! 开头表示反规则
# / 开头表示路径，为项目根路径， ** 表示任意层中间目录
# / 结尾表示目录
# 其他开头看末尾，没有 / 结尾就是文件，否则是目录
# * ? [abc] 表示模糊匹配

# @trap # 注释不能像 java 中一样放在代码后面，只能在行开头，即下面一行规则无效
/*.a    # 注释放在这里，会让整行规则失效

# 排除掉根目录（即 .git 隐藏目录所在的目录）下，所有 .kasei 结尾的文件
/*.kasei       

# 排除掉当前目录（即 .gitignore 文件所在的目录）下，所有 .kasei 结尾的文件
*.kasei      

# 排除掉任何名为 out 的目录
/**/out/    
/**/build/


# 排除 /ProjectName/.gradle 目录
/.gradle/


# 排除指定目录下的内容，除了 yyy
/xxx/**
!/xxx/yyy

