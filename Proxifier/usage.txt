下载当前目录下的安装文件，打开二进制编辑器，去掉第一个字节，第一个自己为 20， 即空格

坑:
    一定要安装 安装版，portable 版功能有问题

注册码：用户名随便填
    Standard Edition
    5EZ8G-C3WL5-B56YG-SCXM9-6QZAP
    G3ZC7-7YGPY-FZD3A-FMNF9-ENTJB
    YTZGN-FYT53-J253L-ZQZS4-YLBN9
    
    Portable Edition 
    L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C

配置步骤：
    1. 代理服务器配置：
        Profile -> Proxy Servers -> Add... 
        Server 栏目
        -> Address: 127.0.0.1       # 代理服务器地址
        -> Port: 1080               # 端口
        Protocol
        -> [单选] SOCKS Version5
        -> check     
    2. 代理规则设置:
        Profile -> Proxification Rule 
        -> Rule Name: 表示当前规则的名称，随便取
        -> Applications: 表示本机中的应用程序，多个用英文 ; 隔开，不填表示任何应用程序
        -> Target Hosts: 表示的是应用程序访问的主机 ip，不是 shadowsocks 代理的本机的 ip
        -> Target Port: 同样表示应用程序访问的端口，
        -> Action: 表示符合上述匹配的场景应该执行什么样的动作
        例1：Rule Name="LocalHost" Application="" Target Hosts="SS服务器IP;127.0.0.1" Target Port="" Action="Direct"
        表示：本机的任何应用程序，访问“SS服务器;127.0.0.1;...” 等主机的任意端口时都直接连接不经过代理
        例2：Rule Name="ShadowSocks" Application="chrome.exe" Target Hosts="" Target Port="" Action="Proxy SOCKS5 127.0.0.1"
        表示：谷歌浏览器访问任何主机的任意端口都经过 "Proxy SOCKS5 127.0.0.1" 代理       
        -> 所以一般把 SS 服务器的 IP 配在 LocalHost 中，表示不经过代理
        坑：如果 Applications 添加了不生效，可以把软件打开，进任务管理器找进程名，然后把进程名添加到 Applications 中，这是因为有些进程名跟文件名不一致导致的
    3. 域名解析设置:
        Profile -> Name Resolution
        -> Proxifier DNS Settings
            [不勾选] Detect DNS settings automatically
            [勾选] Resolve hostnames through proxy（通过代理服务器解析域名）
        -> OK

其他配置:
    开启 HTTP Proxy Server:
        Profile -> Advanced 
        -> HTTP Proxy Servers...
        -> [勾选] Enable HTTP Proxy Servers support

    修改 Proxy Checker 使用的地址:
        View -> Proxy Checker... -> Test Settings...
        -> Test 2: Connection through the Proxy Server
            Target host: www.baidu.com         Port: 80
        
抓包方式:
    设置系统代理:  [Internet 选项] — [连接] — [局域网设置] — [高级] 
        cons: 
            只对以下情况有效:
                IE Chrome等浏览器
                程序使用WinInet库进行HTTP/HTTPS通信
                程序内嵌Webbrowser
            如果程序没有使用 Windows 提供的 WinInet 库进行 HTTP 通信，而是自带了一个库，
            比如: 
                VC 程序使用 libcurl，
                JAVA 程序使用 JDK 中的 URLConnection 或第三方 OkHttp，
                C# 使用 System.Net.Http 等，
            这些库在程序内部实现了 HTTP 包的封装与拆解，那么最终他们将直接调用操作系统的 socket api 发送数据，操作系统当然就没法给他们设置 HTTP/HTTPS 代理了

    使用软件自带的代理配置:
        例如: shell> java -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=8888  设置 java http proxy

    强行设置代理:
        SocksCap64: 使用黑科技API HOOK技术，HOOK了Windows Sockets API，然后把所有的TCP/UDP包通过代{过}{滤}理转发
        Proxifier: 是正规军，使用了Windows提供的正规接口，通过安装WinSock LSP模块过滤/转发TCP/UDP包
